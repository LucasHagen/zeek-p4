#pragma once

#include "zeek/Conn.h"
#include "zeek/IPAddr.h"

namespace zeek::packet_analysis::BR_INF_UFRGS_ZPO {

/**
 * @brief Generic event packet generated by the P4 switch.
 */
typedef struct event_t_struct {
    uint32_t pkt_num;      // 4
    uint16_t protocol_l3;  // 2
    uint16_t protocol_l4;  // 2
    uint32_t src_addr;     // 4
    uint32_t dst_addr;     // 4
    uint16_t src_port;     // 2
    uint16_t dst_port;     // 2
    uint16_t type;         // 2

    // Total bytes: 22
} event_t;

/**
 * @brief Representation of the ZPO Event Header.
 */
class ZPOEventHdr {
public:
    /**
     * @brief Construct a new ZPOEventHdr object
     *
     * @param data A pointer to the beginning of the header.
     */
    ZPOEventHdr(const uint8_t* data);
    ~ZPOEventHdr() = default;

    /**
     * @brief Size of the event_t header in bytes.
     *
     * The `sizeof` function can't be used because it is 4-byte aligned, we
     * need raw size.
     */
    const int PACKET_SIZE = 22;

    const uint8_t* data;
    const event_t* hdr;
    const uint32_t packet_number;
    const uint16_t l3_protocol;
    const uint16_t l4_protocol;
    const zeek::IPAddr src_addr;
    const zeek::IPAddr dst_addr;
    const uint16_t src_port;
    const uint16_t dst_port;
    const uint16_t event_type;

    bool IsIPv4() const;

    zeek::Layer3Proto GetLayer3Proto() const;
    TransportProto GetTransportProto() const;
    const uint8_t* Payload() const;
};

}  // namespace zeek::packet_analysis::BR_INF_UFRGS_ZPO
