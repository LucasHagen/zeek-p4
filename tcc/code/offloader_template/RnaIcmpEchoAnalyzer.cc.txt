#include "RnaIcmpEchoAnalyzer.h"

// Includes and namespaces have been hidden to enhance readability

RnaIcmpEchoAnalyzer::RnaIcmpEchoAnalyzer() : Analyzer("RNA_ICMP_ECHO") {}

// Code addapted from `deps/zeek/src/packet_analysis/protocol/icmp/ICMP.cc`
RecordValPtr BuildInfo(const icmp_echo_message_h* icmp)
{
    static auto icmp_info = zeek::id::find_type<RecordType>("icmp_info");
    auto rval = make_intrusive<RecordVal>(icmp_info);
    rval->Assign(0, val_mgr->Bool(false));
    rval->Assign(1, val_mgr->Count(icmp->itype));
    rval->Assign(2, val_mgr->Count(icmp->icode));
    rval->Assign(3, val_mgr->Count(ntohs(icmp->len)));
    rval->Assign(4, val_mgr->Count(icmp->ttl));
    return rval;
}

bool RnaIcmpEchoAnalyzer::AnalyzePacket(size_t len, const uint8_t* data, Packet* packet)
{
    auto rna_packet = static_cast<RnaPacket*>(packet);
    auto offloader_hdr = rna_packet->GetOffloaderHdr();
    auto icmp_hdr = (const icmp_echo_message_h*)data;

    int payload_len = len - sizeof(icmp_echo_message_h);
    const u_char* payload = (const u_char*)(data + sizeof(icmp_echo_message_h));
    auto payloadStr = new String(payload, payload_len, false);

    auto conn = offloader_hdr->GetOrCreateConnection(packet);

    EventHandlerPtr e;
    switch (icmp_hdr->itype)
    {
        case ICMP_ECHOREPLY:
            e = icmp_echo_reply;
            break;
        case ICMP_ECHO:
            e = icmp_echo_request;
            break;
        default:
            return false;
    }

    packet->processed = true;

    if (e)
    {
        event_mgr.Enqueue(e, conn->GetVal(), BuildInfo(icmp_hdr),
                          val_mgr->Count(ntohs(icmp_hdr->id)),
                          val_mgr->Count(ntohs(icmp_hdr->seq)),
                          make_intrusive<StringVal>(payloadStr));
    }

    return true;
}
